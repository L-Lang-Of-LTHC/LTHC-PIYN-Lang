  > Shell help >  
    
    /!\ Warning: The variables' names are extremly case sensitive
    
    Numeric variable type:
      
        VARN name = value
            Create a variable with a value = value or change the value of an existant variable to value
        VARN name >
            Print the value of the variable
        VARN name <
            A user input who ask to user to enter a value for the variable
        VARN name ++
            Increment the value of the variable
        VARN name --
            Decrement the value of the variable
        VARN name1 + name2 
            Set the value of name1 to name1 + name2 
        VARN name1 - name2 
            Set the value of name1 to name1 - name2 
        VARN name1 * name2 
            Set the value of name1 to name1 * name2 
        VARN name1 / name2 
            Set the value of name1 to name1 / name2 
        VARN name1 % name2 
            Set the value of name1 to name1 % name2 
        VARN name1 #sa
            Cast the value of VARSA variable named name1 to a VARN value 
            which is the new value of the VARN variable named name1 
        VARN name1 #s
            Cast the value of VARS variable named name1 to a VARN value 
            which is the new value of the VARN variable named name1 
        VARN name1 #
            Cast the value of VARS variable named name1 to a VARN value 
            which is the new value of the VARN variable named name1 
    
    Limited char string type:
        
        Allowed char: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,;?!:/\"'`~#{([})]-_|*+-><&éèçà@^¨$ =°êëîïôöâäûü

        VARS name = value
            Create a variable with a value = value or change the value of an existant variable to value
        VARS name >
            Print the value of the variable
        VARS name <
            A user input who ask to user to enter a value for the variable
        VARS name ++
            Increment the value of the variable
        VARS name --
            Decrement the value of the variable
        VARS name1 + name2 
            Set the value of name1 to name1 + name2 
        VARS name1 #n
            Cast the value of VARN variable named name1 to a VARS value 
            which is the new value of the VARS variable named name1 
        VARS name1 #
            Cast the value of VARSA variable named name1 to a VARS value 
            which is the new value of the VARS variable named name1 
    
    String type:
        
        VARSA name = value
            Create a variable with a value = value or change the value of an existant variable to value
        VARSA name >
            Print the value of the variable
        VARSA name <
            A user input who ask to user to enter a value for the variable
        VARSA name1 + name2 
            Set the value of name1 to name1 + name2 
        VARSA name1 #n
            Cast the value of VARN variable named name1 to a VARSA value 
            which is the new value of the VARSA variable named name1 
        VARSA name1 #
            Cast the value of VARS variable named name1 to a VARSA value 
            which is the new value of the VARSA variable named name1 
    
    Advanced simple instructions:
        
        SSUM name1 = name2 
            set the value of the VARN type variable named name1 to the "sum" of all char
            contained in the VARS type variable named name2 
        
        HSSUM name1 = name2 
            set the value of the VARN type variable named name1 to the "special 'sum' " of all char
            contained in the VARS type variable named name2 
        
        /!\ The result of HSSUM is often different of the result of SSUM
    
    Advanced complex instructions:
        
        SMUDI name1 = name2 
            set the value of the VARN type variable named name1 to the "SMUDI" the VARS type variable named name2 
            for more details: see the source code of interpreter
        
        HSMUDI name1 = name2 
            set the value of the VARN type variable named name1 to the "HSMUDI" the VARS type variable named name2 
            for more details: see the source code of interpreter
        
        /!\ The result of HSSUM is often different of the result of SSUM
    
    Comparison:
        CMP name1 : name2 => name3 
            compare the VARN type variable named name1 to the VARN type variable named name2 
            and store a value of -1 or 0 or 1 (to represent the result) in the VARN type variable named name3 
        
        CMPS name1 : name2 => name3 
            special comparison of the VARS type variable named name1 to the VARS type variable named name2 
            and store a value of -1 or 0 or 1 (to represent the result) in the VARN type variable named name3 
        
        CMPR name1 : name2 => name3 
            compare the VARS type variable named name1 to the VARS type variable named name2 
            and store a value of -2 or 0 (to represent the result) in the VARN type variable named name3 
        
        CMPRA name1 : name2 => name3 
            compare the VARSA type variable named name1 to the VARSA type variable named name2 
            and store a value of -2 or 0 (to represent the result) in the VARN type variable named name3 
    
    VARF and FCALL:
        
        VARF name =file
            create a VARF type variable which point to file
        
        FCALL name 
            run the code of the file pointed by the VARF type variable named name 
            it is a Function CALLer for execute function
    
    Conditional instructions:
        
        LT name : func 
            if the VARN type variable named name is the result of a comparison and if this result is lesser than (-1)
            then func is execute, func is a VARF type variable named func 
        
        GT name : func 
            if the VARN type variable named name is the result of a comparison and if this result is greater than (1)
            then func is execute, func is a VARF type variable named func 
        
        NE name : func 
            if the VARN type variable named name is the result of a comparison and if this result is non equal (-2 or -1 or 1)
            then func is execute, func is a VARF type variable named func 
        
        EQ name : func 
            if the VARN type variable named name is the result of a comparison and if this result is equal (0)
            then func is execute, func is a VARF type variable named func 
        
  < Shell help <  
  