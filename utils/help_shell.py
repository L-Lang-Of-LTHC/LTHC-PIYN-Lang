# -*- coding: utf-8 -*-

# ./utils/help_shell.py => a code file created for replace the old file ./utils/help_shell.txt

def get_help():
    tmpa = [
        '  > Shell help >  \n',
        '    \n',
        '    /!\\ Warning: The variables names are extremly case sensitive\n',
        '    \n',
        '    Numeric variable type:\n',
        '      \n',
        '        VARN name = value\n',
        '            Create a variable with a value = value or change the value of an existant variable to value\n',
        '        VARN name >\n',
        '            Print the value of the variable\n',
        '        VARN name <\n',
        '            A user input who ask to user to enter a value for the variable\n',
        '        VARN name ++\n',
        '            Increment the value of the variable\n',
        '        VARN name --\n',
        '            Decrement the value of the variable\n',
        '        VARN name1 + name2 \n',
        '            Set the value of name1 to name1 + name2 \n',
        '        VARN name1 - name2 \n',
        '            Set the value of name1 to name1 - name2 \n',
        '        VARN name1 * name2 \n',
        '            Set the value of name1 to name1 * name2 \n',
        '        VARN name1 / name2 \n',
        '            Set the value of name1 to name1 / name2 \n',
        '        VARN name1 % name2 \n',
        '            Set the value of name1 to name1 % name2 \n',
        '        VARN name1 #sa name2 \n',
        '            Cast the value of VARSA variable named name2 to a VARN value \n',
        '            which is the new value of the VARN variable named name1 \n',
        '        VARN name1 #s name2 \n',
        '            Cast the value of VARS variable named name2 to a VARN value \n',
        '            which is the new value of the VARN variable named name1 \n',
        '        VARN name1 # name2 \n',
        '            Cast the value of VARS variable named name2 to a VARN value \n',
        '            which is the new value of the VARN variable named name1 \n',
        '    \n',
        '    Limited char string type:\n',
        '        \n',
        '        Allowed char: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,;?!:/\\"\`~#{([})]-_|*+-><&\xc3\xa9\xc3\xa8\xc3\xa7\xc3\xa0@^\xc2\xa8$ =\xc2\xb0\xc3\xaa\xc3\xab\xc3\xae\xc3\xaf\xc3\xb4\xc3\xb6\xc3\xa2\xc3\xa4\xc3\xbb\xc3\xbc\n',
        '\n',
        '        VARS name = value\n',
        '            Create a variable with a value = value or change the value of an existant variable to value\n',
        '        VARS name >\n',
        '            Print the value of the variable\n',
        '        VARS name <\n',
        '            A user input who ask to user to enter a value for the variable\n',
        '        VARS name ++\n',
        '            Increment the value of the variable\n',
        '        VARS name --\n',
        '            Decrement the value of the variable\n',
        '        VARS name1 + name2 \n',
        '            Set the value of name1 to name1 + name2 \n',
        '        VARS name1 #n name2 \n',
        '            Cast the value of VARN variable named name2 to a VARS value \n',
        '            which is the new value of the VARS variable named name1 \n',
        '        VARS name1 # name2 \n',
        '            Cast the value of VARSA variable named name2 to a VARS value \n',
        '            which is the new value of the VARS variable named name1 \n',
        '    \n',
        '    String type:\n',
        '        \n',
        '        VARSA name = value\n',
        '            Create a variable with a value = value or change the value of an existant variable to value\n',
        '        VARSA name >\n',
        '            Print the value of the variable\n',
        '        VARSA name <\n',
        '            A user input who ask to user to enter a value for the variable\n',
        '        VARSA name1 + name2 \n',
        '            Set the value of name1 to name1 + name2 \n',
        '        VARSA name1 #n name2 \n',
        '            Cast the value of VARN variable named name2 to a VARSA value \n',
        '            which is the new value of the VARSA variable named name1 \n',
        '        VARSA name1 # name2 \n',
        '            Cast the value of VARS variable named name2 to a VARSA value \n',
        '            which is the new value of the VARSA variable named name1 \n',
        '    \n',
        '    Advanced simple instructions:\n',
        '        \n',
        '        SSUM name1 = name2 \n',
        '            set the value of the VARN type variable named name1 to the "sum" of all char\n',
        '            contained in the VARS type variable named name2 \n',
        '        \n',
        '        HSSUM name1 = name2 \n',
        '            set the value of the VARN type variable named name1 to the "special \sum\ " of all char\n',
        '            contained in the VARS type variable named name2 \n',
        '        \n',
        '        /!\\ The result of HSSUM is often different of the result of SSUM\n',
        '    \n',
        '    Advanced complex instructions:\n',
        '        \n',
        '        SMUDI name1 = name2 \n',
        '            set the value of the VARN type variable named name1 to the "SMUDI" the VARS type variable named name2 \n',
        '            for more details: see the source code of interpreter\n',
        '        \n',
        '        HSMUDI name1 = name2 \n',
        '            set the value of the VARN type variable named name1 to the "HSMUDI" the VARS type variable named name2 \n',
        '            for more details: see the source code of interpreter\n',
        '        \n',
        '        /!\\ The result of HSMUDI is often different of the result of SMUDI\n',
        '    \n',
        '    Comparison:\n',
        '        CMP name1 : name2 => name3 \n',
        '            compare the VARN type variable named name1 to the VARN type variable named name2 \n',
        '            and store a value of -1 or 0 or 1 (to represent the result) in the VARN type variable named name3 \n',
        '        \n',
        '        CMPS name1 : name2 => name3 \n',
        '            special comparison of the VARS type variable named name1 to the VARS type variable named name2 \n',
        '            and store a value of -1 or 0 or 1 (to represent the result) in the VARN type variable named name3 \n',
        '        \n',
        '        CMPR name1 : name2 => name3 \n',
        '            compare the VARS type variable named name1 to the VARS type variable named name2 \n',
        '            and store a value of -2 or 0 (to represent the result) in the VARN type variable named name3 \n',
        '        \n',
        '        CMPRA name1 : name2 => name3 \n',
        '            compare the VARSA type variable named name1 to the VARSA type variable named name2 \n',
        '            and store a value of -2 or 0 (to represent the result) in the VARN type variable named name3 \n',
        '    \n',
        '    VARF and FCALL:\n',
        '        \n',
        '        VARF name =file\n',
        '            create a VARF type variable which point to file\n',
        '        \n',
        '        FCALL name \n',
        '            run the code of the file pointed by the VARF type variable named name \n',
        '            it is a Function CALLer for execute function\n',
        '    \n',
        '    Conditional instructions:\n',
        '        \n',
        '        LT name : func \n',
        '            if the VARN type variable named name is the result of a comparison and if this result is lesser than (-1)\n',
        '            then func is execute, func is a VARF type variable named func \n',
        '        \n',
        '        GT name : func \n',
        '            if the VARN type variable named name is the result of a comparison and if this result is greater than (1)\n',
        '            then func is execute, func is a VARF type variable named func \n',
        '        \n',
        '        NE name : func \n',
        '            if the VARN type variable named name is the result of a comparison and if this result is non equal (-2 or -1 or 1)\n',
        '            then func is execute, func is a VARF type variable named func \n',
        '        \n',
        '        EQ name : func \n',
        '            if the VARN type variable named name is the result of a comparison and if this result is equal (0)\n',
        '            then func is execute, func is a VARF type variable named func \n',
        '        \n',
        '    Loop:\n',
        '        \n',
        '        LOOP name : func \n',
        '            repeat the value of integer cast of the value of the VARN type variable named name times \n',
        '            the execution of the VARF type variable named func \n',
        '\n',
        '  < Shell help <  \n',
        '  \n',
        '  > Other help >\n',
        '\n',
        '    Advanced:\n',
        '\n',
        '        \n',
        '        Existing advanced:\n',
        '            Random\n',
        '            Binary\n',
        '        \n',
        '        Instructions of advanced:\n',
        '            \n',
        '            Random:\n',
        '                \n',
        '                RND name : minima, maxima\n',
        '                    set the value of the VARN type variable named name to a random number between minima and maxima included\n',
        '                \n',
        '                RNDS name : size\n',
        '                    set the value of the VARS type variable named name to a random char string of the size of size \n',
        '                \n',
        '                RNDA name : size\n',
        '                    set the value of the VARSA type variable named name to a random char string of the size of size \n',
        '            \n',
        '            Binary:\n',
        '                \n',
        '                BIN8 name = bvalue\n',
        '                    Create a variable with a bvalue = bvalue or change the bvalue of an existant variable to bvalue\n',
        '                BIN8 name >\n',
        '                    Print the bvalue of the variable\n',
        '                BIN8 name <\n',
        '                    A user input who ask to user to enter a bvalue for the variable\n',
        '                BIN8 name =n value\n',
        '                    change the bvalue of an existant variable to value, value must be an unsigned integer\n',
        '                BIN8 name >n\n',
        '                    Print the unsigned integer representation of the bvalue of the variable\n',
        '                BIN8 name <n\n',
        '                    A user input who ask to user to enter an unsigned integer for the variable\n',
        '                \n',
        '                BIN16 name = bvalue\n',
        '                    Create a variable with a bvalue = bvalue or change the bvalue of an existant variable to bvalue\n',
        '                BIN16 name >\n',
        '                    Print the bvalue of the variable\n',
        '                BIN16 name <\n',
        '                    A user input who ask to user to enter a bvalue for the variable\n',
        '                BIN16 name =n value\n',
        '                    change the bvalue of an existant variable to value, value must be an unsigned integer\n',
        '                BIN16 name >n\n',
        '                    Print the unsigned integer representation of the bvalue of the variable\n',
        '                BIN16 name <n\n',
        '                    A user input who ask to user to enter an unsigned integer for the variable\n',
        '                \n',
        '                BIN32 name = bvalue\n',
        '                    Create a variable with a bvalue = bvalue or change the bvalue of an existant variable to bvalue\n',
        '                BIN32 name >\n',
        '                    Print the bvalue of the variable\n',
        '                BIN32 name <\n',
        '                    A user input who ask to user to enter a bvalue for the variable\n',
        '                BIN32 name =n value\n',
        '                    change the bvalue of an existant variable to value, value must be an unsigned integer\n',
        '                BIN32 name >n\n',
        '                    Print the unsigned integer representation of the bvalue of the variable\n',
        '                BIN32 name <n\n',
        '                    A user input who ask to user to enter an unsigned integer for the variable\n',
        '            \n',
        '            Random and Binary:\n',
        '                \n',
        '                BIN8 name :r\n',
        '                    Set the bvalue of the variable named name to a random bvalue\n',
        '                BIN16 name :r\n',
        '                    Set the bvalue of the variable named name to a random bvalue\n',
        '                BIN32 name :r\n',
        '                    Set the bvalue of the variable named name to a random bvalue\n',
        '\n',
        '  < Other help <  \n',
        '  ',
    ]

    hlp_msg = ''
    for i in tmpa:
        hlp_msg += i
    
    return hlp_msg
